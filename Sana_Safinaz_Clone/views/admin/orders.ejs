<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Orders</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        /* Fullscreen overlay with blur */
.details-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5); /* Semi-transparent background */
    backdrop-filter: blur(5px); /* Blur effect */
    z-index: 1050; /* High z-index to stay above other elements */
    display: none; /* Initially hidden */
}

/* Modal container styling */
.details-modal {
    max-width: 600px;
    width: 90%;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.3);
}

/* Close button styling */
.close-modal {
    font-size: 24px;
    font-weight: bold;
    color: #333;
    background: #f8f9fa;
    border: 1px solid #ced4da;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: background-color 0.3s ease, color 0.3s ease;
}

.close-modal:hover {
    background: #dc3545;
    color: #fff;
    cursor: pointer;
}


        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: scale(0.9);
            }
            to {
                opacity: 1;
                transform: scale(1);
            }
        }

.view-details {
    display: inline-block;
    padding: 5px 10px;
    font-size: 14px;
    color: #fff;
    background-color: #1f3b64; /* Primary blue color */
    border: none;
    border-radius: 5px;
    text-decoration: none;
    cursor: pointer;
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
}
.s-d {
    padding: 5px 10px;
    font-size: 14px;
    width:130px;
    color: #495057; /* Neutral text color */
    background-color: #f8f9fa; /* Light background for dropdown */
    border: 1px solid #ced4da; /* Border for better definition */
    border-radius: 5px; /* Rounded corners */
    outline: none;
    transition: all 0.3s ease;
    cursor: pointer;
}

.s-d:focus,
.s-d:hover {
    background-color: #e9ecef; /* Slightly darker background on hover */
    border-color: #0d6efd; /* Highlighted border */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Subtle shadow effect */
    color: #0d6efd; /* Change text color on hover */
}

.s-d option {
    background-color: #fff; /* White background for dropdown options */
    color: #000; /* Standard black text for options */
}
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4 text-center">Orders</h1>
        <table class="table table-striped table-hover table-bordered">
            <thead class="table-dark">
                <tr>
                    <th scope="col">Order ID</th>
                    <th scope="col">Customer Name</th>
                    <th scope="col">Total Price</th>
                    <th scope="col">Status</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                <% orders.forEach(order => { %>
                    <tr>
                        <% console.log(typeof order); %>
                        <% const orderss = JSON.stringify(orders); %>
                        <td><%= order._id %></td>
                        <td><%= order.user ? order.user.name : 'N/A' %></td>
                       
                        <td>Rs.<%= order.orderTotal.toFixed(2)%></td>
                        <td><%= order.status %></td>
                        <td>
                            <span class="view-details" id = "view-detail" onclick="showDetails('<%= order._id %>','<%= orderss %>')">View Details</span> |
                            <select class="form-select form-select-sm d-inline-block  status-dropdown s-d" onchange="changeStatus('<%= order._id %>', this.value)">
                                <option disabled selected>Change Status</option>
                                <option value="Pending">Pending</option>
                                <option value="Processing">Processing</option>
                                <option value="Delivered">Delivered</option>
                                <option value="Cancelled">Cancelled</option>
                            </select>
                        </td>
                    </tr>
                <% }); %>
            </tbody>
        </table>
    </div>

    <!-- Details Modal  -->
  <!-- Details Modal -->
<div id="details-overlay" class="details-overlay d-none justify-content-center align-items-center">
    <div class="details-modal bg-white rounded p-4 position-relative">
        <span class="close-modal position-absolute" style="top: 10px; right: 10px; cursor: pointer;" onclick="hideDetails()">âœ–</span>
        <div id="details-content">
            <!-- Placeholder for dynamically loaded content -->
        </div>
    </div>
</div>

 


    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
   


function showDetails(orderId,orderss) {
   let orders = JSON.parse(orderss);
    const detailsOverlay = document.getElementById('details-overlay');
    const detailsContent = document.getElementById('details-content');
   
   
    // Find the order details using orderId
    const order = orders.find(o => o._id === orderId);

    if (order) {
        // price = order.orderTotal + 190;
        // Populate modal with order details
        detailsContent.innerHTML = `
            <h2 class="text-center mb-4">Order Details</h2>
            <p><strong>Order ID:</strong> ${order._id}</p>
            <p><strong>Customer Name:</strong>  ${order.user ? order.user.name : 'N/A'}</p>
           
            <p><strong>Total Price:</strong> Rs. ${order.orderTotal.toFixed(2)}</p>
            <p><strong>Status:</strong> ${order.status}</p>
            <h4>Items:</h4>
            <ul>
                ${order.items
                    .map(
                        item => `<li>${item.name}: Rs. ${item.price.toFixed(2)} (Qty: ${item.quantity})</li>`
                    )
                    .join('')}
            </ul>
        `;
    } else {
        // Fallback if order is not found
        detailsContent.innerHTML = `
            <h2 class="text-center text-danger">Order Not Found</h2>
            <p class="text-center">Unable to load order details.</p>
        `;
    }

    // Display the overlay
    detailsOverlay.classList.remove('d-none');
    detailsOverlay.style.display = 'flex'; // Ensure it's displayed `
          
}


// Hide modal
function hideDetails() {
    const detailsOverlay = document.getElementById('details-overlay');
    detailsOverlay.classList.add('d-none');
    detailsOverlay.style.display = 'none'; // Hide the modal
}


        // Change order status
        function changeStatus(orderId, newStatus) {
            fetch(`/admin/orders/${orderId}/status`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ status: newStatus })
            })
            .then(response => {
                if (response.ok) {
                    alert('Status updated successfully!');
                    location.reload();
                } else {
                    alert('Failed to update status.');
                }
            })
            .catch(error => console.error('Error updating status:', error));
        }
    </script>
</body>
</html>


    


